#!/usr/bin/env python2.7

# Python 2.7 is required because we want Markdown tables, which appear to
# be available only in releases of python-markdown that don't run under
# Python 2.7.

import json
import os
import sys
import markdown
import requests
import re
import ConfigParser
import time

def tohtml(md, url=None, fn=None, alt=None):
	extensions=['markdown.extensions.tables',
	            'markdown.extensions.toc']
	html = markdown.markdown(md.decode('utf-8'), extensions=extensions)

	if html == '':
		if alt:
			html = '<p>' + alt + '</p>'
		else:
			html = '<p/>'
	else:
		date = time.strftime('on %b %d, %Y at %H:%M')
		html += '\n<p>&nbsp;</p>'
		html += '<p><small>This page was updated %s from <a href="%s">%s</a>.</small></p>' % \
		        (date, url, fn)

	return html


class main(object):

	def send(self, title, html, uri=None, endpoint=None, category=None, folder=None, article=None, fn=''):
		if not uri:
			if not endpoint:
				raise ValueError, 'uri or endpoint is required'

			if category and folder and article:
				# update existing
				path = ['solution', 'categories', category,
				        'folders', folder, 'articles', article]

			elif category and folder:
				# update existing
				path = ['solution', 'categories', category,
				        'folders', folder, 'articles']

			else:
				raise ValueError, 'at least category and folder are required'

			uri = endpoint + '/'.join([str(x) for x in path])

		if not uri.endswith('.json'):
			uri += '.json'

		headers = {
			'Content-type': 'application/json',
		}

		data = {
			'solution_article': {
				'title': title,
				'description': html,
				'art_type': 1,
				#don't change status#'status': 2,
			},
			'tags': {},
		}

		sys.stdout.write('Sending %s (%s) to %s...' % (title, fn, article))
		r = requests.put(uri,
		                 data=json.dumps(data),
		                 auth=requests.auth.HTTPBasicAuth(self.apikey, ''),
		                 headers=headers)
		sys.stdout.write('%d\n' % r.status_code)
		#if r.status_code != 200:
		#	sys.stdout.write(str(r.headers))


	def readmap(file):
		mappings = []
		fp = open(file, 'r')
		for line in fp:
			match, mapto = line.strip().split()
			mappings.append([re.compile(match, re.I), mapto])
		fp.close()
		return mappings

	def mapfilename(file):
		mapfile = os.path.join(os.path.dirname(sys.argv[0]), 'articles.map')
		mappings = readmap(mapfile)
		for r, mapto in mappings:
			m = r.search(file)
			if m:
				return m.expand(mapto)
		return None

	def __call__(self, args):
		cfg = ConfigParser.RawConfigParser()
		cfg.read(sys.argv[0] + '.ini')
		if cfg.has_section('include'):
			for option, value in cfg.items('include'):
				cfg.read(value) or cfg.read(option)

		self.apikey = cfg.get('api', 'apikey')

		mapping = []
		for option, value in cfg.items('filemap'):
			#mapping.append([re.compile(option, re.I), value])
			mapping.append([option, value])

		def mapfile(f):
			for r, value in mapping:
				#if r.search(f):
				#	return value
				if f.lower().endswith(r.lower()):
					return [x.strip() for x in value.split(',')]
			return []

		def gettitle(fn, lines, article=None):
			# Four ways to derive a title
			if article:
				# find lines like this:
				# [title]: articlenumber "title of document here"
				for line in lines:
					if line.startswith('[title]: %s' % str(article)):
						off = line.find('"')
						return line[off:].strip().strip('"')

			# find lines like this:
			# [title]: - "title of document here"
			for line in lines:
				if line.startswith('[title]:'):
					off = line.find('"')
					return line[off:].strip().strip('"')

			headlines = filter(lambda line: line.startswith('#'), lines)
			if headlines:
				return headlines[0].strip('#').strip()

			# fallback
			return os.path.basename(fn).replace('.md', '').replace('-', ' ') + ' *'

		for file in args:
			fn = os.path.normpath(file)
			fn = fn.replace(os.getcwd(), '')
			fn = fn.lstrip('/')
			title = None

			paths = mapfile(fn)
			if not paths:
				print 'no mapping for', fn
				continue

			# read content and parse out title
			fp = open(file, 'r')
			data = fp.read()
			fp.close()

			# derive the source info and github link
			origin = os.path.join(os.path.basename(os.getcwd()), fn)
			origin = 'sourced from ' + origin
			url = os.environ['upstream'] + '/blob/master/' + os.environ['relpath']
			alt = 'This document has not been created. Please <a href="' + url + '">edit ' + \
			      'the source</a> to create it.'

			# then generate HTML
			lines = data.split('\n')
			html = tohtml(data, fn=fn, url=url, alt=alt)

			# Post the html once for each path
			for path in paths:
				try:
					category, folder, article = path.split('/')
				except ValueError:
					category = '0'
					folder = '0'
					article = path

				if cfg.has_option('categories', category):
					category = cfg.get('categories', category)
				if cfg.has_option('folders', folder):
					folder = cfg.get('folders', folder)
				if cfg.has_option('articles', article):
					article = cfg.get('articles', article)

				uri = cfg.get('api', 'uri') % locals()
				if uri is None:
					print 'no uri mapped for %s' % fn
					continue

				title = gettitle(fn, lines, article=article)

				# temporary: mark the docs from github
				title = '[github] ' + title

				self.send(title, html, uri, fn=fn, article=article)


if __name__ == '__main__':
	sys.exit(main()(sys.argv[1:]))
